#!/usr/bin/perl
use strict;
use warnings;
use LWP::UserAgent;
use JSON;
use Digest::MD5 qw(md5_hex);
use DBI;
use POSIX qw(strftime);
use Time::HiRes qw(time);

# Function to fetch the content of a URL and return it as bytes
sub fetch_url_content {
    my ($url) = @_;
    my $start_time = time();
    print "Fetching content from URL: $url\n";
    my $ua = LWP::UserAgent->new;
    my $response = $ua->get($url);
    my $end_time = time();
    my $elapsed_time = $end_time - $start_time;

    if ($response->is_success) {
        print "Successfully fetched: $url in $elapsed_time seconds\n";
        return $response->content;  # Get the content as bytes
    } else {
        my $error_msg = "Error fetching URL $url: " . $response->status_line . " in $elapsed_time seconds\n";
        log_error($error_msg);
        print $error_msg;
        return;
    }
}

# Function to compute the MD5 checksum of a string
sub compute_md5 {
    my ($content) = @_;
    return md5_hex($content);
}

# Function to initialize the SQLite database
sub init_db {
    print "Initializing database\n";
    my $dbh = DBI->connect("dbi:SQLite:dbname=urls.db","","");
    $dbh->do("
        CREATE TABLE IF NOT EXISTS url_data (
            url TEXT PRIMARY KEY,
            md5 TEXT,
            content BLOB,
            last_checked TEXT
        )
    ");
    return $dbh;
}

# Function to load the saved checksum and data from the database
sub load_saved_data {
    my ($dbh, $url) = @_;
    print "Loading saved data for URL: $url\n";
    my $sth = $dbh->prepare("SELECT md5, content, last_checked FROM url_data WHERE url = ?");
    $sth->execute($url);
    my $row = $sth->fetchrow_hashref;
    return $row;
}

# Function to save data to the database
sub save_data {
    my ($dbh, $url, $md5, $content) = @_;
    print "Saving data for URL: $url\n";
    my $last_checked = strftime "%Y-%m-%d %H:%M:%S", localtime;
    my $sth = $dbh->prepare("REPLACE INTO url_data (url, md5, content, last_checked) VALUES (?, ?, ?, ?)");
    $sth->execute($url, $md5, $content, $last_checked);
}

# Function to log errors to a file
sub log_error {
    my ($message) = @_;
    open my $fh, '>>', 'scrabbi_error.log' or die "Could not open error log file: $!";
    print $fh $message;
    close $fh;
}

# Function to log changes to a file
sub log_change {
    my ($message) = @_;
    open my $fh, '>>', 'scrabbi_change.log' or die "Could not open change log file: $!";
    print $fh $message;
    close $fh;
}

# Main program
sub main {
    my $json_url = 'https://raw.githubusercontent.com/BoaThor/CVE-Resources/main/cve_resources_list_alpha_sorted.JSON';
    my $dbh = init_db();

    # Download the JSON file from the GitHub repository
    print "Fetching JSON file from GitHub: $json_url\n";
    my $json_text = fetch_url_content($json_url);
    unless ($json_text) {
        die "Error fetching JSON file\n";
    }

    my $json_data;
    eval {
        $json_data = decode_json($json_text);
    };
    if ($@) {
        die "Error parsing JSON file: $@\n";
    }

    my $total_urls = scalar(@$json_data);
    my $processed_urls = 0;

    foreach my $entry (@$json_data) {
        $processed_urls++;
        my $url = $entry->{location};
        print "Processing $processed_urls of $total_urls\n";
        printf("%.2f%% of URLs processed\n", ($processed_urls / $total_urls) * 100);
        my $content = fetch_url_content($url);
        unless ($content) {
            print "Error fetching content for URL: $url, skipping...\n";
            next;
        }
        my $md5 = compute_md5($content);
        my $saved_data = load_saved_data($dbh, $url);

        if ($saved_data) {
            if ($saved_data->{md5} ne $md5) {
                my $change_msg = "Change detected at URL $url\n";
                log_change($change_msg);
                print $change_msg;
            } else {
                print "No change at URL $url\n";
            }
        } else {
            print "New URL $url added\n";
        }

        save_data($dbh, $url, $md5, $content);
    }

    $dbh->disconnect;
    print "Program finished\n";
}

main();
